// OBJECT ORIENTED PROGRAMMING

// 'THIS' KEYWORD
// PROTOTYPE SYSTEM
// CLASS {}
// "BEHAVIOR DELEGATION"



// 'THIS' KEYWORD

// JAVASCRIPT'S VERSION OF 'DYNAMIC SCOPE' IS 'THIS'

// NOT DEPENDENT ON WHERE FUNCTION WAS WRITTEN.

// ONLY THING THAT MATTERS IS HOW THE FUNCTION WAS CALLED FOR THE 'THIS' KEYWORD.

// IN NON-STRICT MODE, DEFAULT 'THIS' TO THE GLOBAL OBJECT.

// IN STRICT MODE, DEFAULT STAYS UNDEFINED.

// 'THIS' KEYWORD GENERALLY REFERS TO WHATEVER IS LEFT OF THE DOT.

// .CALL AND .APPLY METHODS.

// 'THIS' FOR FLEXIBILITY
// 'LEXICAL' FOR PREDICTABILITY 


// 'NEW' KEYWORD IN FRONT OF FUNCTION CALL
// 1. BRAND NEW EMPTY OBJECT.
// 2. NEWLY CREATED OBJECT GETS LINKED TO ANOTHER OBJECT.
// 3. NEWLY CREATED OBJECT GETS PASSED IN AS THE 'THIS' CONTEXT TO THE FUNCTION CALL.
// 4. IF THE FUNCTION DOES NOT RETURN IT'S OWN OBJECT, WILL RETURN 'THIS' OBJECT.


// 1. IS THE FUNCTION CALLED BY 'NEW'?
// 2. IS THE FUNCTION CALLED BY CALL() APPLY() OR BIND() ?
// 3. IS THE FUNCTION CALLED ON A CONTEXT OBJECT?
// 4. DEFAULT TO GLOBAL OBJECT, EXCEPT STRICT MODE, WHICH IS UNDEFINED.

// 'THIS' IS NOT A SPECIAL KEYWORD INSIDE ARROW FUNCTIONS.

// 'THIS' KEYWORD BEHAVES BY LEXICAL SCOOPING RULES WITH ARROW FUNCTION.


// PROTOTYPES

// OBJECTS ARE BUILT BY CONSTRUCTOR CALLS

// A CONSTRUCTOR MAKES AN OBJECT LINKED TO IT'S OWN PROTOTYPE.

// CONSTRUCTOR => A FUNCTION CALLED WITH THE 'NEW' KEYWORD IN FRONT.

// [[Prototype]] => A LINKAGE FROM ONE OBJECT TO ANOTHER. CREATED
// WHEN THE OBJECT IS INITIALLY CREATED.

// [[PROTOTYPE]] => DELEGATES UP THE CHAIN.

// 3 WAYS TO FIND LINKAGE.
// 1. __PROTO__
// 2. OBJECT.GETPROTOTYPEOF()
// 3. OBJECT.CONSTRUCTOR.PROTOTYPE()



// CLASS {}

// class Foo {
//     constructor(who) {
//         this.me = who;
//     }

//     identify() {
//         return 'I am ' + this.me;
//     }
//     static hello() { return 'Hello!';}
// }

// let a1 = new Foo('a1');
// let a2 = new Foo('a2');

// console.log(a1.identify());
// console.log(a2.identify());

// class Bar extends Foo {
//     speak() {
//         alert('Hello, ' + super.identify() + '.');
//     }
// }

// let b1 = new Bar('b1');

// console.log(b1.identify());

// console.log(Bar.hello());

// console.log(b1);


// CANNOT EXTEND AN OBJECT WITH CLASSES

// CALL 'SUPER' BEFORE USING 'THIS' KEYWORD

// 'SUPER' KEYWORD IS STATICALLY BOUND.

// STAY WITHIN THE LINES WHEN USING CLASS SYNTAX.



// INHERITANCE

// BEHAVIOR DELEGATION

// DESIGN PATTERN

// DELEGATION ORIENTED DESIGN

// PROTOTYPE DELEGATION => A LINK FROM ONE OBJECT TO ANOTHER 
// THAT ALLOWS THOSE OBJECTS TO SHARE CONTEXT AT CALL TIME.

