// IF A FEATURE IS SOMETIMES USEFUL AND SOMETIMES DANGEROUS,
// AND IF THERE IS A BETTER OPTION, THEN ALWAYS,
// USE THE BETTER OPTION.

// THE PURPOSE OF A PROGRAMMING LANGUAGE IS TO,
// AID PROGRAMMERS IN PRODUCING ERROR-FREE PROGRAMS.

// DON'T DO DANGER DRIVEN DEVELOPMENT
// USE SEMICOLONS

// NEW GOOD PARTS IN ES6

// PROPER TAIL CALLS:
// RETURN FUNC();

// ELLIPSIS, REST AND SPREAD OPERATOR.

// MODULES

// LET AND CONST

// DESTRUCTURING

// WEAKMAP

// BACKTICKS

// Object.keys(object).forEach()

// PROTOTYPAL INHERITANCE: MEMORY CONSERVATION
// :RETROACTIVE HEREDITY
// :PERFORMANCE INHIBITING


// CLASS FREE OBJECT ORIENTED PROGRAMMING

// function constructor(spec) {
//     let
//         {member} = spec,
//         {other} = other_constructor(spec)
//         method = function () {
//             // member, other, method, spec
//         };
//     return Object.freeze({
//         method,
//         other;
//     })
// }


// RESPONSIBILITY TO:
// 1. THE PEOPLE / THE USER => CUSTOMER FOCUSED
// 2. THE TEAM => CLEAR, WELL DOCUMENTED CODE
// 3. MANAGEMENT

// DON'T MAKE BUGS