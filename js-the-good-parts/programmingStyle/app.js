// NOTE TAKING FROM DOUGLAS CROCKFORD "JAVASCRIPT: THE GOOD PARTS"

// PROGRAMMING STYLE AND YOUR BRAIN

//TWO SYSTEMS

// 1. HEAD.
// 2. GUT.

// VISUAL PROCESSING ANALOGY

// BRAIN CAN BE INCONSISTENT FROM TIME TO TIME.

// COMPUTER PROGRAMS - THE MOST COMPLICATED THINGS PEOPLE MAKE.

// PROGRAMMING LANGUAGE

// PROGRAMMING USES BOTH SYSTEMS.

// 1 LOVES TO GUESS
// 2 IS NOT GOOD AT GUESSING

// BE CONSISTENT. ALWAYS BE CONSISTENT.

//  below will return an error

// return //; <= will automatically place a semicolon.
// {
//     ok: false;
// };


// PUT CURLY BRACES ON THE RIGHT

// SWITCH STATEMENT. (THE FALLTHROUGH HAZARD)

// INTRODUCTION OF LOWERCASE, WORDBREAKS, AND PUNCTUATION REDUCED ERROR RATE IN WRITING.

// GOOD USE OF STYLE CAN HELP REDUCE THE OCCURANCE OF ERRORS.

// PROGRAMS MUST COMMUNICATE CLEARLY TO PEOPLE

// USE ELEMENTS OF GOOD COMPOSITION WHERE APPLICABLE.

// USE SPACES TO DISAMBIGUATE PARENTHESIS.
// NO SPACE BETWEEN A FUNCTION NAME AND LEFT PARENTHESIS.
// ONE SPACE BETWEEN ALL OTHER NAMES AND (.

// IIFE'S (IMMEDIATELY INVOKABLE FUNCTION EXPRESSIONS)

// (function() {
//     // a better way to write an IFFE, with the final parenthesis after funciton call. Looks cleaner.
// }());

// NEVER RELY ON AUTOMATIC SEMICOLON INSERTION. ALWAYS PLACE SEMICOLONS WHERE THEY ARE TO BE.

// DON'T USE 'WITH' STATEMENT

// CONFUSION MUST BE AVOIDED

// ELIMINATE SOURCES OF CONFUSION

// ALWAYS USE === , NEVER ==. (CROCKFORD IS NOT A FAN OF ==)

// IF THERE IS A FEATURE OF A LANGUAGE THAT IS SOMETIMES PROBLEMATIC, AND IF IT CAN BE
// REPLACED WITH ANOTHER FEATURE THAT IS MORE RELIABLE, THEN ALWAYS USE THE MORE
// RELIABLE FEATURE.

// MULTILINE STRING LITERALS (CROCKFORD IS NOT A FAN OF THESE EITHER)

// MAKE YOUR PROGRAMS LOOK LIKE WHAT THEY DO.

// DECLARE ALL VARIABLES AT TOP OF FUNCTION.
// DECLARE ALL FUNCTIONS BEFORE YOU CALL THEM.

// WRITE IN THE LANGUAGE YOU ARE WRITING IN.

// STOP USING VAR, USE LET, LET RESPECTS BLOCK SCOPE.


// GLOBAL VARIABLES

// GLOBAL VARIABLES ARE EVIL.
// AVOID GLOBAL VARIABLES
// WHEN USING GLOBAL VARIABLES, BE EXPLICIT. UPPER_CASE
// GLOBAL VARIABLES SHOULD BE RARE AND STICK OUT LIKE A SORE THUMB.

// RECOMMENDS NOT USING 'NEW' KEYWORD EVER.

// CONSTRUCTOR FUNCTIONS SHOULD BE NAMED WITH INITIAL CAPS.

// WRITE IN A WAY THAT CLEARLY COMMUNICATES YOUR INTENT.

// ALWAYS ADD CURLY BRACES ON IF, WHILE, AND LOOPS

// AS OUR PROCESSES BECOME MORE AGILE, OUR CODING MUST BE MORE RESILIENT.

// ALWAYS WRITE READABLE CODE.

// RECOMMENDS USING ' += 1 ' INSTEAD OF ' ++ ' TO INCREMENT.


// FOR NO COST, BY ADOPTING A MORE RIGOROUS STYLE, MANY CLASSES OF ERRORS
// CAN BE AUTOMATICALLY AVOIDED.

// KEEP CODE AS CLEAN AS POSSIBLE.

// DO NOT PREMATURELY OPTIMIZE CODE.

// ONLY OPTIMIZE NECESSARY CODE

// ALGORITHM REPLACEMENT IS VASTLY MORE EFFECTIVE THAN CODE FIDDLING.

// FORMS THAT CAN HIDE DEFECTS ARE CONSIDERED DEFECTIVE.

// DO WHAT YOU CAN TO MOVE THE ODDS TO YOUR FAVOR.