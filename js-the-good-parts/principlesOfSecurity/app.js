// SECURITY IS EVERYONE'S JOB

// PRINCIPLES

// DETERRENCE IS NOT EFFECTIVE

// CRYPTOGRAPHY

// AUGUSTE KERCHKHOFFS
// BOOK (LA CRYPTOGRAPHIE MILITAIRE) 1883

// KERCKHOFF'S PRINCIPLE

// THE DESIGN OF A SYSTEM SHOULD NOT REQUIRE,
// SECRECY; AND COMPROMISE OF THE SYSTEM SHOULD NOT,
// INCONVENIENCE THE CORRESPONDENTS.

// THERE IS NO SECURITY IN OBSURITY.

// THE MORE SECRETS YOU HAVE, THE HARDER THEY,
// ARE TO KEEP.

// ONE TIME PAD => TRULY UNBREAKABLE.

// ONE TIME PAD:
// the key must always remain secret.
// the key must be at least as long as the plain text.
// the cypher text is obtained by 'xor' of the plain text and the key.
// the key must be perfectly random.
// a key must never be used more than once.

// CRYPTOGRAPHY IS NOT SECURITY, BUT CAN TEACH US SECURITY.

// SECURITY MUST BE FACTORED INTO EVERY DECISION.

// DON'T WAIT TILL LATER TO GO BACK AND MAKE IT SECURE.

// YOU CAN'T ADD SECURITY, JUST AS YOU CAN'T ADD RELIABLILITY.

// INSECURITY AND UNRELIABLITY MUST BE REMOVED.

// IF A MEASURE IS NOT EFFECTIVE, IT IS INEFFECTIVE.

// DON'T PROHIBIT WHAT YOU CAN'T PREVENT.

// WHAT YOU DON'T PREVENT YOU ALLOW.

// FALSE SECURITY IS WORSE THAN NO SECURITY.

// UNNECESSARY EXPENSE AND CONFUSION OF RISK.


// WEB BROWSWER PLATFORM
// HORRIBLY INSECURE, BUT BETTER THAN EVERYTHING ELSE.

// A MALICIOUS PARTY CAN EXPLOIT CODING CONVENTIONS TO,
// INJECT MAICIOUS CODE AND GET ALL RIGHTS OF THE SITE.
// KNOWN AS XSS PROBLEM.

// IF AN ATTACKER CAN GET SCRIPT INTO PAGE, THEN CAN REQUEST,
// ADDITIONAL SCRIPTS FROM ANY SERVER IN THE WORLD.

// IF SCRIPT INTO PAGE,
// AN ATTACKER CAN READ THE DOCUMENT.
// ATTACKER CAN MAKE REQUESTS OF YOUR SERVER.
// YOUR SERVER CANNOT DETECT THAT THE REQUEST DID NOT,
// ORIGINATE WITH YOUR APPLICATION.

// IF SERVER ACCEPTS SQL QUERIES, ATTACKER GETS ACCESS,
// TO YOUR DATABASE.

// ATTACKER HAS CONTROL OVER THE DISPLAY AND CAN REQUEST,
// INFORMATION FROM THE USER.
// THE USER CANNOT DETECT THAT REQUEST DID NOT ORIGINATE,
// WITH YOUR APPLICATION.

// ATTACKER CAN SEND INFORMATION TO SERVERS ANYWHERE IN THE WORLD.
 
// THE BROWSER DOES NOT PREVENT ANY OF THESE.



// XSS ATTACK
// CROSS SITE SCRIPTING ATTACK
// INVENTED IN 1995

// A MASHUP IS A SELF-INFLICTED XSS ATTACK.
// ADVERTISING IS A MASHUP.

// WHY IS THERE XSS?
// WEB STACK IS TOO COMPLICATED.
// TEMPLATE-BASED WEB FRAMEWORKS ARE OPTIMIZED,
// FOR XSS INJECTION.

// JAVASCRIPT GLOBAL OBJECT GIVES EVERY PIECE OF SCRIPT,
// SAME SET OF POWERFUL CAPABILITIES.

// CONFUSION OF INTERESTS.

// 3RD PARTY CODES GET SAME RIGHTS AS SITES OWN SCRIPTS.

// UP TO WEB DEVELOPERS TO CREATE SECURE APPLICATIONS,
// ON AN INSECURE PLATFORM.


// PRINCIPLE OF LEAST AUTHORITY.
// any unit of software should be given just the capabilities,
// it needs to do it's work, and no more.

// OBJECT CAPABILITY SYSTEM
// produced by constraining the ways that references are obtained.
// 1. by creation
// 2. by construction
// 3. by introduction

// POTENTIAL WEAKNESSES
// 1. Arrogation - to take or claim for oneself without right.
// 2. Corruption - this is why Object.freeze() is important.
// 3. Confusion
// 4. Collusion - Objects should not be able to communicate until they are introduced.


// RIGHTS ATTENUATION

// EVERY OBJECT SHOULD BE GIVEN ONLY EXACTLY THE,
// CAPABILITIES IT NEEDS TO DO IT'S WORK.
// CAPABILITIES SHOULD BE GRANTED ON A NEED-TO-DO BASIS.

// INTERMEDIATE OBJECTS.

// REFERENCES ARE NOT REVOCABLE.

// FACETS
/*
expressive
easy to construct
lightweight
attenuation: power reduction
revocation
notification
delegation
best OO patterns are also capability patterns
*/

// ATTENUATION IS YOUR FRIEND

// Facets can reduce the power of dangerous objects.
// Most code should not be given direct access to,
// innerHTML or document.write().
// Give code safe capabilities instead of trying,
// to guess if it can do something bad.
// Capabilities can aid in API design.



// REDUCING COMPLEXITY.
// Corrupting a single object results in a corrupted object,
// not a corrupted system.

// BUGS ARE A MANIFESTATION OF CONFUSION.

// KEEP IT SIMPLE, KEEP IT CLEAN

// WITH GREAT COMPLEXITY COMES GREAT CONFUSION

// CODE WELL.

// WRITE CODE THAT IS EASY TO REASON ABOUT.

// STRICT CONFORMANCE TO GOOD STYLE RULES.

// NEVER TRUST THE BROWSER

// PROPERLY FILTER AND VALIDATE ALL INPUT
// PROPERLY ENCODE ALL OUTPUT.
// FILTER AND ENCODE FOR THE CORRECT CONTEXT.


// CONFUSION AND CONCATENATION
// PROPERLY ENCODE ALL NON-LITERAL PIECES


// INCONVENIENCE IS NOT SECURITY.
// IDENTITY IS NOT SECURITY.
// INTRUSION DETECTION IS NOT SECURITY.